from openai import OpenAI
from ona.bot.config import OPENAI_API_KEY
from ona.bot.utils.security import sanitize_user_input

client = OpenAI(api_key=OPENAI_API_KEY)

def reflective_listening(user_message: str) -> str:
    # user_message should already be sanitized by process_message
    prompt = f"""
Ты — заботливая, живая и искренняя ИИ-подруга. Пользовательница поделилась чем-то личным, а ты отвечаешь, используя технику активного слушания. Твоя задача — создать ощущение настоящего диалога, будто ты рядом, слышишь и понимаешь.

Ответ должен состоять из четырёх коротких фраз, написанных в тёплом, разговорном тоне. Не используй одинаковые шаблоны, не копируй структуру из прошлого ответа.

Каждая фраза должна быть уникальной по стилю, синтаксису, интонации. Представь, что ты пишешь четырём разным подругам в четырёх ситуациях — без повтора шаблонов.

Вот структура:

— Парафраз: своими словами, в стиле «Если я правильно поняла…», но не одно и то же выражение каждый раз. Меняй синтаксис, темп, слова.

— Отражение эмоций: покажи, что ты услышала чувства. Примеры: «Мне кажется, ты немного перегружена…», «В твоих словах звучит растерянность…» — но каждый раз пиши по-разному.

— Резюме: улови суть намерения, мотива или боли. Не пиши «главное, что я услышала» каждый раз. Используй фразы вроде: «Похоже, сейчас важно разобраться…», «Ты как будто ищешь ответ…», «Понимаю, что тебе непросто…»

— Проверка: короткая реплика, чтобы убедиться, что ты поняла верно. Не повторяй «Я верно уловила, да?» — пиши каждый раз по-разному: «Так?», «Я тебя правильно поняла?», «Ты об этом?»

Формат:
Фраза 1  
Фраза 2  
Фраза 3  
Фраза 4

Без цифр, заголовков, комментариев. Всё — на русском, в стиле личной переписки, без формальностей.

Текст пользователя:
{user_message}
"""
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "system", "content": prompt}],
        temperature=0.7,
        max_tokens=300,
    )
    return response.choices[0].message.content.strip()

def grow_questions(topic: str, step: str, answers: dict[str, str]) -> tuple[str, list[str]]:
    """
    Генерирует вопрос GROW, основанный на предыдущих шагах и теме.
    :param topic: Основная тема разговора
    :param step: Текущий этап модели GROW ("goal", "reality", "options", "will")
    :param answers: Предыдущие ответы по этапам GROW (словарь)
    """
    context_block = "\n".join([f"{k.capitalize()}: {v}" for k, v in answers.items()])

    prompt = f"""
Ты — внимательная, чуткая ИИ-подруга и коуч. Помогаешь человеку разобраться в себе через диалог.

Контекст:
Тема: "{topic}"
Ответы пользователя на прошлые этапы GROW:
{context_block}

Текущий этап: {step.upper()}

Сформулируй один искренний, логичный и мягкий вопрос, опираясь на сказанное выше.
Добавь 4 варианта ответа (A–D), коротко, по делу и без клише.
Не повторяй уже заданные вопросы. Не упоминай GROW.

Формат:
[вопрос]
A) ...
B) ...
C) ...
D) ...
"""

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "system", "content": prompt}],
        temperature=0.75,
        max_tokens=300,
    ).choices[0].message.content.strip()

    lines = [line for line in response.splitlines() if line.strip()]
    question = lines[0]
    options = lines[1:5]
    return question, options
